name: make-sqlite-db

on:
##  release:
##    # Only use the types keyword to narrow down the activity types that will trigger your workflow.
##    types: [created, prereleased]
  push:
    # Provizu eldonojn `vLundo` ktp. per SQLite-DB
    # (alternative oni povus akcepti ĉiun eldonon kaj alpendigi al tiu)

    tags:
      - vLundo      
      - vMardo      
      - vMerkredo      
      - vĴaŭdo      
      - vVendredo      
      - vSabato      
      - vDimanĉo      
    #branches:
    #  - master


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Elŝutu la dosierojn 
      uses: actions/checkout@v1
    - name: Saluto al docker.pkg.github.com
        # https://github.community/t5/GitHub-Actions/Use-docker-images-from-GitHub-Package-Registry/td-p/30407    
        # https://github.com/actions/starter-workflows/blob/master/ci/docker-push.yml    
      run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p $GITHUB_TOKEN
      env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Prenu procesumon voko-formiko
      run: docker pull "docker.pkg.github.com/revuloj/voko-formiko/voko-formiko:latest"
    - name: Kreu dosierujojn por konservi la rezultojn ...
      run: |
        mkdir $GITHUB_WORKSPACE/tgz
        #mkdir $GITHUB_WORKSPACE/tmp
        chmod 777 $GITHUB_WORKSPACE/t??
        ls -l $GITHUB_WORKSPACE
    - name: Kreu SQLite-datumbazon el la XML-dosieroj
      run: docker run --name voko-formiko 
        -v $GITHUB_WORKSPACE/revo:/home/formiko/revo/xml 
        -v $GITHUB_WORKSPACE/tgz:/home/formiko/tgz
        docker.pkg.github.com/revuloj/voko-formiko/voko-formiko:latest 
        formiko srv-sqlite-db-tuto

# vd. https://github.com/actions/upload-release-asset
    - name: Retrovu la rezultintajn ZIP-dosierujojn
      id: retrovu_zip
      run: |
        ls -l $GITHUB_WORKSPACE/tgz
        echo "::set-output name=revosql::$(ls tgz/revosql_20*)"
        echo "::set-output name=revosql_inx::$(ls tgz/revosql-inx_20*)"

    - name: Eltrovu la URL de la hodiaŭa eldono
      uses: actions/github-script@0.4.0
      id: retrieve_release
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        debug: true
        script: |
            const core = require('@actions/core')
            const release = await github.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,            
                tag: '${{ github.ref }}
            const upload_url = release.data.upload_url            
            console.log('UploadURL is: '+upload_url)
            core.setOutput('upload_url', upload_url)

##'
##    - name: Kreu eldonon
##      id: create_release
##      uses: actions/create-release@v1
##      env:
##        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##      with:
##        tag_name: ${{ github.ref }}
##        release_name: eldono ${{ github.ref }}
##        draft: false
##        prerelease: false
    - name: Alpendigu sqlrevo-inx
      id: upload-inx 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.retrieve_release.outputs.upload_url }} 
        asset_path: ${{ steps.retrovu_zip.outputs.revosql_inx }}
        asset_name: Revo-indekso kiel SQLite
        asset_content_type: application/zip
    - name: Alpendigu sqlrevo
      id: upload-inx-art 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.retrieve_release.outputs.upload_url }} 
        asset_path: ${{ steps.retrovu_zip.outputs.revosql }}
        asset_name: Revo-indekso kaj HTML-artikoloj kiel SQLite
        asset_content_type: application/zip

